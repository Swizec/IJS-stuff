                        ProviderToolbox README
                        ======================

Author: dusan
Date: 2010-11-24 16:56:31 CET


ProviderToolbox provides a set of tools that ease ingest of content
into P2P-Next enabled cloud. This version is a second generation of
tools. Its aim is towards simplifying the implementation of original
toolbox even on cost of general utility of the toolbox.

Currently the toolbox provides the following features:
- can read RSS and Atom feeds
- can generate rich metadata from the feeds and embodied media
- provides programmable tools for generating P2P-Next compliant Atom
  feeds (VoD, Live streams, discovery):
  + for live streams provides parsers for RTV Slovenia and BBC
    programme schedule
- can fetch the content from a feed and store it locally
- can generate torrent files for fetched content per P2P-Next
  specification
- can generate P2P-Next VoD feeds from external VoD feeds
- can create a feed from scratch from local content
- for stored feeds can generate discovery feeds
- a tool for continuous publishing (ingest, seeding) of generated VoD
  torrent files, automated updates, additions and removals are
  supported

Though the toolbox aims at simplification of the implementation the
implementation is still complex. The reason for this are diverse
feed sources and a need to suit multiple content providers.

ProviderToolbox was developed on Linux platform (Ubuntu) and it should
work on Mac OSX.

A number of things needs still to be provided for the ProviderToolbox
to be fully functional:
- on the fly generation of P2P-Next Live feeds

Table of Contents
=================
1 Implementation content 
2 Installation 
    2.1 Dependencies 
3 Before using the toolbox, important 
4 Feed lifecycle management 
    4.1 Setting up example web server 
    4.2 Adjust default settings 
    4.3 Get the feed initially 
    4.4 Updating the feed 
        4.4.1 Updating the feed from the cron 
    4.5 Bring up the torrent server 
    4.6 Generating a discovery feed 
    4.7 Managing feed window 
    4.8 Listing the feeds 
    4.9 Removing the publications or feeds 
5 Tools documentation and examples of usage 
    5.1 Getfeed tool 
        5.1.1 Command line options and their details 
        5.1.2 Quick summary 
    5.2 Discoveryfeed tool 
        5.2.1 Command line options and their details 
        5.2.2 Quick summary 
    5.3 Managefeed tool 
    5.4 Publisher 
        5.4.1 Controlling the publisher 
6 Changelog 


1 Implementation content 
~~~~~~~~~~~~~~~~~~~~~~~~~

The content of the ProviderToolbox implementation is lay out as
follows:

   - Metadata generator from feeds and media:
     + MetadataGenerator.py
   - Programmable tools for generation of P2P-Next compliant feeds:
     + FeedGenerator.py
   - Programmable tools for getting external feed metadata, fetching
     content, creating torrents and creating P2P-Next VoD feeds:
     + ContentSource.py
   - Configuration file:
     + conf/default_settings.py
   - External sources:
     + external/feedgenerator.py
     + external/feedparser.py
     + external/functional.py
   - Tools
     + tools/getfeed.py
     + tools/managefeed.py
     + tools/discoveryfeed.py
     + tools/publisher.py
     + tools/printxml.py
  - bin (shell wrap of some tools)
     + bin/getfeed
     + bin/publisher
  - Unit test:
     + test/test_content_source.py
     + test/test_feed_generator.py
     + test/test_meta_generator.py
     + test/test_publisher.py
   - Various utils:
     + utils/exceptions.py
     + utils/log.py
     + utils/utilities.py

2 Installation 
~~~~~~~~~~~~~~~

Obtain the implementation from the source
(https://ttuki.vtt.fi/svn/p2p-next/JSI/ProviderToolbox) and put it in
the JSI directory in Next-Share tree. Correct layout:

Next-Share/JSI/ProviderToolbox

Touch __init__.py in JSI directory if not provided.

2.1 Dependencies 
=================

ProviderToolbox depends on JSI RichMetadata implementation and
existence of ffmpeg tool. RichMetadata implementation can be obtained
from its repository
(https://ttuki.vtt.fi/svn/p2p-next/JSI/RichMetadata).  Consult the
tool README for installation. If you have already RichMetadata
implementation installed please update the installation to latest
release version.

Obtain and install ffmpeg tool per instruction for your target
platform. FFmpeg program should be in your shell path.

All other Next-Share dependencies valid for your platform, consult
Next-Share/README.txt for details.

3 Before using the toolbox, important 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before using the toolbox some adjustments and decisions need to be
made to default settings. The settings are defined in file
JSI/ProviderToolbox/conf/default_settings.py.
- decide where fetched and added content to the feeds will be stored
  via variable MEDIA_ROOT (default '/media/external'). The directory
  needs to be writable and readable by the user running the toolbox.
- decide where the fetched and added content torrent files will be
  stored via variable EXPORT_TORRENT_DIR (default
  /media/external/torrents). If the torrent files will be served via
  web server the directory should reside in web server root. The
  directory needs to be writable and readable by the user running the
  toolbox.
- decide internal tracker port and IP via INTERNAL_TRACKER_PORT and
  INTERNAL_TRACKER_IP variables. The variables needs to be defined
  before creating any torrents (and fetching or adding any content).

There are number of other variables set in default_settings.py, most
useful will be to change the following:
- CONTENT_PUBLISHING_LINK variable that defines absolute link for the
  feeds publications (items). The link will be prepend to all your
  publications in your exported feeds if not defined per feed via
  command line
- EXPORT_FEED_LINK variable that defines absolute link for publishing
  the feeds xml files. The link will be prepend to all exported feeds
  xml files, including discovery feed, if the link is not defined per
  feed via command line.
- UPDATE_INTERVAL variable tunes the torrent server update
  interval. In general don't set it too low.

To understand how the variables are used read about the feed life
cycle management in the next section.

4 Feed lifecycle management 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All the content managed via ProviderToolbox is related to one or more
feeds. The feeds and their content could be acquired with getfeed tool
or created with managefeed tool. Alternatively the feeds can be
crafted by hand as well, via file system, files and feed related
content manipulation.

The tools briefly described in this section are more broadly discussed
in the next section on "Tools documentation and examples of usage".

If the variables discussed in the previous section are set up properly
the system should works as is presented in the following picture. (In
text version of this README the figure is ditaa sketch in ascii -
fixed width font is needed to see the figure properly.)

+-----------------+                                 +-----------------+
|                 |                                 |                 |
|                 |                                 |                 |
| ContentSource   |                                 |  FeedGenerator  |
|    (getfeed,    +------------+       +----------->+ (discoveryfeed, |
|   managefeed)   |            |       |            |     getfeed)    |
|                 |            v       |            |                 |
| cRED            |       /----+-------+----\       | cYEL            |
+-----------------+       |                 |       +--------+--------+
                          |                 |                |
                          |      Feeds      |                |
     +----------=---------+     Storage     +                |
     |                    |                 |                |
     |                    |                 |                |
     |                    | cBLU            |                |
     |                    \--------+--------/                |
     |                             |                         |
     :                             v                         :
     |                    /--------+--------\                |
     |                    |                 |                |
     |                    |                 |                |
     |                    |     Torrents    |                |
     |       +------------+     Storage     +                |
     |       |            |                 |                |
     v       v            |                 |                v
+----+-------+----+       |  cBLU           |       +--------+--------+
|                 |       \--------+--------/       |                 |
|                 |                |                |                 |
|     Torrent     |                |                |       Web       |
|     Server      |                +--------=------>+      Server     |
|   (publisher)   |                                 |                 |
|                 |                                 |                 |
| c1FF            |                                 | cGRE            |
+--------+--------+                                 +--------+--------+
         |                                                   |
         |                                                   |
         |                                                   |
         v                                                   v

      content/                                             feeds
    publications                                     publication links


The getfeed and managefeed tools (upper left corner) are used to fill
the feeds storage. While getting the feed information and feed content
the torrent files are generated on the fly containing P2P-Next
compliant rich metadata including with automagically obtained media
(content) metadata. The torrent files are storred in the torrents
storage. The getfeed tool generates on the standard output the
P2P-Next compliant Atom feed for each feed obtained. The generated
feeds should be stored in a file system as a file, suitable to be
served through web server for user consumption. When the feed are
obtained the discoveryfeed tool can be used to generate a discovery
feed from stored feeds; the tool again outputs the feed on standard
output, which should be stored in a filesystem accessible and served
by web server.

The feeds accessed through the web server should be available at url
as defined in getfeed or discoveryfeed export option (-e) or as
combination of feed name appended to the variable EXPORT_FEED_LINK as
discussed in the previous section.

The publications (content, rich metadata) should be available at link
defined as combination of absolute publishing link specified via
command line and default or via customized ContentUnit instance (see
getfeed tool section) specified relative link. Alternatively, common
absolute link can be specified via CONTENT_PUBLISHING_LINK variable,
as discussed in the previous section.

When the feeds are created or acquired they can be published via
publisher tool. The publisher tool acts as a simple seeder and tracker
for the content specified in the torrent files. After being run the
tool checks the torrent directory (set by EXPORT_TORRENT_DIR variable)
regularly and adds or removes the publications which have been added or
removed by getfeed or managefeed.

The only tool not provided at the moment in the toolbox is a web
server, bottom right in the figure. For serving the feeds and
publication links, together with related HTML/Javascript information,
a normal web server as is provided with your distribution/operating
system can be used. On Ubuntu and similar Linux systems this means
that the links to the feeds and publications should point to web
server root in '/var/www' or similar. Of course, when the feeds are
created they should be stored in a suitable place according to web
server configuration.

4.1 Setting up example web server 
==================================

First prepare an example web server for serving the feed xml files and
links to the publications. In this example we assume that Linux system
similar to Ubuntu is used and has the similar layout as shown:

  - /var/www
    + feeds (directory from where the feeds will be served)
    + publish (directory for publications)

Make sure that the user running the ProviderToolbox has write and read
permissions to both directories. A series of commands similar to these
should prepare the web server, assuming that the web server is already
running and operational:

sudo mkdir /var/www/feeds 
sudo mkdir /var/www/publish
sudo addgroup www
sudo addgroup dusan www
sudo chgrp www /var/www/feeds
sudo chgrp www /var/www/publish 
sudo chmod g+rw /var/www/publish
sudo chmod g+rw /var/www/feeds

and test the setup, note that you need to log out and log in the
system to actually get the www group rights:

touch /var/www/publish/lala
rm /var/www/publish/lala

In this section we will refer to this two directories by their names
and links as well:

- /var/www/publish: http://stream.e5.ijs.si/publish
- /var/www/feeds: http://stream.e5.ijs.si/feeds

4.2 Adjust default settings 
============================

If we would like serve direct links to torrent files the
EXPORT_TORRENT_DIR would need to be changed so it is directly
accessible to the user, change the variable in the default_settings.py
to:

EXPORT_TORRENT_DIR = /var/www/publish

After this change the torrents while getting the feed will be written
to the specified directory.

4.3 Get the feed initially 
===========================

Before any publishing the feeds needs to be acquired or created. To
acquire the feed use getfeed tool, for example:

   xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -l http://downloads.bbc.co.uk/podcasts/radio4/today/rss.xml

The feed can be generated by the hand as well, for lengthy example
consult "Managedfeed tool" section how the FAB channel content feed
could be created.

The result of running the getfeed tool as presented will obtain the
content, generate rich metadata for the feed and content and create
initial P2P-Next compliant torrent files in the directory as defined
in settings.EXPORT_TORRENT_DIR.

Check the results and correct the wrong parameters if any. Consult the
tools documentation section if needed.

4.4 Updating the feed 
======================

Any feed obtained from the network can be manually updated if
needed. In the simplest form, run something like:

   xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -u /media/external/Best_of_Today/

The directory /media/external/Best_of_Today/ is a directory where
initial getfeed run has stored the feed. The feed will be updated, new
content acquired, metadata generated and torrents file created.

If the feeds needs to be updated automatically some shell script could
be helpful, like:

NEXT_SHARE_HOME=/home/dusan/delo/src/M32/Next-Share
cd $NEXT_SHARE_HOME
export PYTHONPATH=$(pwd):.
python JSI/ProviderToolbox/tools/getfeed.py -u $1

The example script will update the feed specified via command line
parameter - directory of the feed. The script can be found in
JSI/ProviderToolbox/bin/getfeed. Please note that the variable
NEXT_SHARE_HOME needs to be adjusted to your needs.

Run it as:

JSI/ProviderToolbox/bin/getfeed /media/external/Best_of_Today

and the tool will collect new content, matadata, create the torrent
files in specified directory and output the P2P-Next compliant feed on
the standard output.

If you add the path to bin directory to your PATH in shell environment
the command can be called from where ever you want.

4.4.1 Updating the feed from the cron 
--------------------------------------

After putting the getfeed command in the user running the toolbox PATH
the feeds can be add to the users crontab to be run regularly. For
example the following line will collect the Best of Today BBC feed
every day five minutes after five in the morning:

5 5 * * * getfeed /media/external/Best_of_Today > /var/www/feeds/Best_of_Today.xml

Of course as many feeds as needed can be added for collection in the
crontab.

4.5 Bring up the torrent server 
================================

The torrent server (seeder) can be brought up with the publisher.py
tool. Run it from a command line like:

   xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/publisher.py

or use provided shell script in JSI/ProviderToolbox/bin/publisher. If
the bin directory is in your path run it like:

   xyz:~/:{1}> publisher&

To run it really independently the scripts needs to be detached from
the terminal (disown?) so that it won't get killed when the terminal
is closed. For more information what the publisher is doing consult
the Publisher section in "Tools documentation and examples of usage".

4.6 Generating a discovery feed 
================================

Discovery feed is build based on information on stored feeds. While
running the tool you need to specify certain parameters on the command
line for proper feed generation, note that the defaults won't
work. For example the following command:

   xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/discoveryfeed.py -t "Discovery feed" -e http://stream.e5.ijs.si/feeds/discovery.xml -p "P2P-Next JSI/RTV Slovenia (livinglab@e5.ijs.si)" > /var/www/feeds/discovery.xml

will generate the discovery feed for collected feeds and redirects the
tool standard output to specified directory accessible by web server.

To make the process automated a similar script as was presented in the
section on updating the feed should be prepared. In this way updates
via cron are possible. It has to be noted that the discoveryfeed tool
really needs to be run only when a new feed is added to the feed
storage.

4.7 Managing feed window 
=========================

The feed window parameter controls how many content items will be kept
in the feed while updating.

Each feed window can be managed independently. Default mode of
operation is collect, window defined is None. You can manage the
window via specifying the right parameter at the feed creation time
with getfeed tool (-w), on any further run of the same command, or via
manually changing the window attribute via editing the feed
'.properties' file in the feed storage directory. If the attribute is
not specified there add the line like:

window = 20

to the properties file and the number of the content items published
through the feed should be 20.

As said, default value is None, feed is in the collect mode. When the
window is 0, the number of items in incoming feed dictates the length
of the exported feed. Specifying a negative value for the window on
the command line enables reverting to default collect mode.

4.8 Listing the feeds 
======================

The managefeed tool can be used to list the feed content:

   xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -l /media/external/Best_of_Today

A short listing will provide feed items listed in feed order together
with related files and identifier. The identifier of an item can be
used latter to remove the item from the feed, if needed.

4.9 Removing the publications or feeds 
=======================================

The publications are removed from the feed by managefeed tool,
specifying the publication (item) identifier:

   xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -d /media/external/Best_of_Today -r 625353e5d4000ece34d291c5329ef2a378fdf85c

The command removes the content, content related rich metadata and the
content related torrent file from the storage.

The feed can be removed with simply removing or moving the feed storage
from MEDIA_ROOT e.g, 'rm -rf /media/external/Best_of_Today' or 'mv
/media/external/Best_of_Today wherever' will remove the feed. The
discovery feed needs to be created again to reflect the change and the
feed torrents files needs to be removed manually from the torrents
storage so the publisher will catch up the change. The files of course
won't be shared any more but the publisher will complain in logs about
the missing file(s). This information could be helpful if some files
torrent files have been forgotten to be deleted.

5 Tools documentation and examples of usage 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For documentation consult this README file, standard python
documentation in the code and the code itself.

5.1 Getfeed tool 
=================

Getfeed tool reads single input feed, gets the feed and embodied media
metadata, stores feed content, generates P2P-Next compliant torrent
files and outputs on stdout P2P-Next compliant VoD feed.

5.1.1 Command line options and their details 
---------------------------------------------

The getfeed toll command line help provides the following
instructions:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py

Reason for failure: Neither location (-l) nor update directory (-u)
                    were specified.

Usage: getfeed.py options

  Gets a feed content and metadata, creates torrent files and outputs P2P-Next
  compliant feed on std out. Consult tool help (-h) for more options.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Be verbose
  -l LOCATION, --location=LOCATION
                        Location of the input feed
  -p PUBLISH, --publish=PUBLISH
                        Location of the absolute publishing link, default
                        http://stream.e5.ijs.si/publish
  -t TEMPLATE, --content-template=TEMPLATE
                        Name of the content template (class) to use in
                        exporting feed content, for example 'RTVVoDContent'
  -e FEEDEXPORT, --export-link=FEEDEXPORT
                        Location of the exported feed, default
                        http://stream.e5.ijs.si/feeds appended with the name
                        of the feed (directory) with xml extension
  -g GUID, --feed-id=GUID
                        Feed identifier
  -i IMAGE, --feed-image=IMAGE
                        Feed image
  -d DIDBASEFILE, --did-base-file=DIDBASEFILE
                        Common feed DID base file
  -w WINDOW, --window=WINDOW
                        A number of content units to keep, None (default)
                        collect, 0 same as source
  -u DIRECTORY, --update=DIRECTORY
                        Update the feed in specified directory and print fresh
                        feed on std out

* Location option 
  
  The '-l' option specifies the location of input feed that will be read
  and metadata and content obtained from. 
  
  Both matadata and content will be stored under directory of your
  choice, specified via settings.MEDIA_ROOT variable. See
  conf/default_settings.py for more details.
  
  Example layout of such storage, MEDIA_ROOT points to
  '/media/external':
  
    xyz:~/src/Next-Share:{1}> ls /media/external/*
  
  /media/external/Best_of_Today:
  Best_of_Today.xml         today_20101111-0652a.mp3  today_20101112-0923a.xml
  today_20101109-0641a.mp3  today_20101111-0652a.xml  today_20101113-0840a.mp3
  today_20101109-0641a.xml  today_20101111-0915a.mp3  today_20101113-0840a.xml
  today_20101109-0921a.mp3  today_20101111-0915a.xml  today_20101113-1057a.mp3
  today_20101109-0921a.xml  today_20101111-0918a.mp3  today_20101113-1057a.xml
  today_20101109-0926a.mp3  today_20101111-0918a.xml  today_20101115-0757a.mp3
  today_20101109-0926a.xml  today_20101111-0923a.mp3  today_20101115-0757a.xml
  today_20101110-0643a.mp3  today_20101111-0923a.xml  today_20101115-0804a.mp3
  today_20101110-0643a.xml  today_20101112-0645a.mp3  today_20101115-0804a.xml
  today_20101110-0946a.mp3  today_20101112-0645a.xml  today_20101115-0954a.mp3
  today_20101110-0946a.xml  today_20101112-0917a.mp3  today_20101115-0954a.xml
  today_20101110-0955a.mp3  today_20101112-0917a.xml
  today_20101110-0955a.xml  today_20101112-0923a.mp3
  
  /media/external/RTV_-_Zapisi_iz_Mocvirja:
  RTV_-_Zapisi_iz_Mocvirja.xml            zapisi_iz_mocvirja_09-11-2010_1629.xml
  zapisi_iz_mocvirja_02-11-2010_1629.mp3  zapisi_iz_mocvirja_26-10-2010_1628.mp3
  zapisi_iz_mocvirja_02-11-2010_1629.xml  zapisi_iz_mocvirja_26-10-2010_1628.xml
  zapisi_iz_mocvirja_09-11-2010_1629.mp3
  
  The storage contains two feeds stored in directories derived from feed
  names. Each unit of content is present with two files, a content file
  and metadata file. It is needles to say that the user invoking the
  getfeed script should have a write permission to the MEDIA_ROOT or feed
  directory. Feed directories are created on fly, if not existent, and
  read and content and metadata information restored, if
  present. Restored information is used in updates of the feed to obtain
  only fresh content (but the whole feed is read from the network).
  
* Publish option 
  
  The publish option '-p' specifies an absolute path of the location
  where the publications could be read as obtained from exported
  P2P-Next feed. If you plan to publish, for example, torrent files of
  the input feed content through a web server
  http://web.server.of.your.choice/publications, this is the absolute
  path that will appear in the feed as a link to publication. The path
  could be not specified as well. To get the final link to publication
  while generating the feed the absolute path is concatenated with the
  content (feed item) relative path as is explained in next section.
  
  For simpler managing of this option you can specify a default value in
  default_settings.py under variable CONTENT_PUBLISHING_LINK. Note if
  you are not specifying per feed value this variable will be used for
  all your feeds.
  
* Export url option 
  
  Export url option (-e) defines where the resulting feed will be
  obtainable from. Usually it will be obtained from a web server
  therefore the link should point to there.
  
  For simpler managing of the feeds you can specify a default value in
  default_settings.py under variable EXPORT_FEED_LINK. In this case the
  the variable will be appended with the feed name and xml extension by
  default. Be sure that the file is stored with the right name in your
  web server. Note that all the feeds, if not specifying per feed
  option, will be directed to the same location as specified by the
  variable.
  
* Template option 
  
  By default the absolute path is concatenated with the content relative
  path while building the final path to the content. The relative path
  is a name of the content torrent file. The default behavior can be
  changed by providing your customized ContentUnit inherited class in
  the ContentSource.py module. There are three methods that were
  intended for customization in the ContentUnit class, presented here
  together with their help:
  
  
      def getImage(self):
          """
          Per content unit settable image. Define any mapping on content
          unit attributes ta return the image location as a string. If
          the method returns None content unit image will equal to feed
          image.
  
          @return string String or None if not defined.
          """
          return None
  
      def getId(self):
          """
          Per content unit settable id. Define any mapping on content
          unit attributes ta return the content id as a string. If the
          method returns None content unit id will be equal to its link.
  
          @return string String or None if not defined.
          """
          return None
  
      def getPublish(self):
          """
          Per content unit settable relative publishing link. Define any
          mapping on content unit attributes ta return the content
          relative publishing link as a string. If the method returns
          None content unit relative publishing link will be equal to
          its torrent publication.
  
          @return string String or None if not defined.
          """
          return None
  
  They allow programmable manipulation of the content related
  parameters. See RTVVoDContent class in ContentSource.py for very
  simple implementation of such template.
  
* Feed guid and image options 
  
  Getfeed tool options '-g' and '-i' allows specifying the feed unique
  id and image. If '-g' is not defined as unique feed id feed exported
  link is used (see next section). If '-i' is not specified original
  output feed image is used.
  
* DIDBase option 
  
  DIDbase option '-d' enables providing a path to DID MPEG21 base file,
  as specified in P2P-Next, as input parameter. The DIDbase provided in
  this way defines the same DIDbase information for all content units in
  the feed. For specifying DIDbase per each content unit separately one
  should overload the setDIDBase method in a class inheriting form
  ContentUnit class (similarly as explained in section on Template
  option, example not provided). The DIDbase file can be generated with
  a help of metagen tool provided in RichMetadata implementation. Not
  all options need to be specified, for example the following command
  will provide enough information for generating a complete DIDbase for
  a torrent file:
  
  python JSI/RichMetadata/tools/metagen.py -b --identifier="urn:p2p-next:item:rtv-slo-slo1-xyz" --relatedIdentifier="urn:rtv-slo:slo1-xyz" --advertisementReference="URI to additional MPEG_21 data (advertising)" --limoReference="URI to additional MPEG_21 data (limo)" --paymentReference="URI to additional MPEG_21 data (payment)" --scalabilityReference="URI to additional MPEG_21 data (scalability)" -c > did-base.xml
  
  Other missing parameters like metadata core, etc,. are already
  available after getting the original feed metadata information.
  
  Without providing DIDbase option only available elements based on
  original feed are packed in the DID base and included in the torrent
  file.
  
  The torrent files as created are stored as is specified by
  settings.EXPORT_TORRENT_DIR in default_settings.py. Per default is
  this directory '/media/external/torrents', for example torrent files
  for the feeds as were presented above are collected in a single
  directory:
  
  /media/external/torrents:
  today_20101109-0641a.tstream  today_20101112-0917a.tstream
  today_20101109-0921a.tstream  today_20101112-0923a.tstream
  today_20101109-0926a.tstream  today_20101113-0840a.tstream
  today_20101110-0643a.tstream  today_20101113-1057a.tstream
  today_20101110-0946a.tstream  today_20101115-0757a.tstream
  today_20101110-0955a.tstream  today_20101115-0804a.tstream
  today_20101111-0652a.tstream  today_20101115-0954a.tstream
  today_20101111-0915a.tstream  zapisi_iz_mocvirja_02-11-2010_1629.tstream
  today_20101111-0918a.tstream  zapisi_iz_mocvirja_09-11-2010_1629.tstream
  today_20101111-0923a.tstream  zapisi_iz_mocvirja_26-10-2010_1628.tstream
  today_20101112-0645a.tstream
  
  It has to be noted that currently no resolving mechanism exists if
  there are two content units with the same name published through one
  or more feeds - the resulting torrent file will be overwritten by the
  torrent file of the content with the same name acquired latter.
  
* Update option 
  
  For easier updating of the feeds when already created you can specify
  just the update option (-u), followed by the directory storage of the
  feed. The feed will be updated, using the same parameters or defaults,
  as when they were created. The resulting feed will be directed to
  proces standard output.
  

5.1.2 Quick summary 
--------------------

To obtain a feed from location and publish it on a web server of your
choice:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -l http://www.rtvslo.si/podcasts/zapisi\_iz\_mocvirja.xml -p http://web.server.of.your.choice/publications

To modify as well the location of the exported feed, e.g. where the
exported feed can be obtained from (link that appears in the feed
itself):

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -l http://www.rtvslo.si/podcasts/zapisi\_iz\_mocvirja.xml -p http://web.server.of.your.choice/publications -e http://web.server.of.your.choice/feeds/myfeed.xml

To use a customize template is enough to specify the right ContentUnit
class:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -l http://www.rtvslo.si/podcasts/zapisi\_iz\_mocvirja.xml -p http://web.server.of.your.choice/publications -e http://web.server.of.your.choice/feeds/myfeed.xml -t RTVVoDContent

To update the feed:

 xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -l http://www.rtvslo.si/podcasts/zapisi\_iz\_mocvirja.xml

or even simpler:

 xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -u /media/external/RTV_-_Zapisi_iz_Mocvirja

5.2 Discoveryfeed tool 
=======================

Discoveryfeed tool creates P2P-Next compliant discovery feed from the
stored feeds and outputs it on stdout.

5.2.1 Command line options and their details 
---------------------------------------------

The discoveryfeed toll command line help provides the following
instructions:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py


Usage: discoveryfeed.py options

  Create discoveryfeed from scratch. Consult tool help (-h) for more options.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Be verbose
  -m MEDIAROOT, --media-root=MEDIAROOT
                        Location of feeds storage, other then media root
                        (settings.MEDIA_ROOT)
  -t TITLE, --feed-title=TITLE
                        Feed title
  -e EXPORTURL, --feed-export-url=EXPORTURL
                        URL where the feed will be accessible
  -p PUBLISHER, --author=PUBLISHER
                        Publisher of the feed
  -u ID, --id=ID        Feed unique identifier
  -i IMAGE, --image=IMAGE
                        Feed image


Please note that the output depends on stored feeds. Discovery feed
items information is based on stored feed information. If there is no
feeds stored the tool will return only the feed head.

5.2.2 Quick summary 
--------------------

An example of usage:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/discoveryfeed.py -t "Discovery feed" -e http://stream.e5.ijs.si/discovery.xml -p "P2P-Next JSI/RTV Slovenia (livinglab@e5.ijs.si)"

5.3 Managefeed tool 
====================

Managefeed tool enables creating a feed from scratch. While getfeed
tool creates the feed from a source in a network managefeed needs
proper inputs to be created. Both type of feeds are stored in a same
manner in the file system with the same or similar properties.

The managefeed tool main operations supported are creation of a feed,
adding to and removing items from the feed and list the feed. Since
the information about the feed and its items is not obtained from
external source the number of parameters supported (and needed for
meaningful management) by the tool is significantly increased. The
command line help for the tool returns:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py

Reason for failure: None of the main options -c, -a, -r or -l specified!

Usage: managefeed.py options

  Creates a feed from scratch or manages the feed. Consult tool help (-h)
  for more options.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Be verbose
  -c, --create-feed     Create or modify feed metadata or parameters
  -a, --add-item        Add feed item
  -r REMOVEITEM, --remove-item=REMOVEITEM
                        Remove feed item by identifier (use list to find the
                        right one)
  -l LIST, --list=LIST  List the feed storage
  --long                List the feed storage in detail
  -m MEDIAROOT, --media-root=MEDIAROOT
                        Location of feeds storage, other then media root
                        (settings.MEDIA_ROOT)
  -t TITLE, --title-name=TITLE
                        Name of the title, feed or item
  -k DESCRIPTION, --series-title=DESCRIPTION
                        Feed series title (description)
  -n LANGUAGE, --language=LANGUAGE
                        Feed language
  -g ORIGINATOR, --originator=ORIGINATOR
                        Feed originator
  -d FEEDDIR, --feed-storage=FEEDDIR
                        Feed storage
  -e EXPORTURL, --feed-export-url=EXPORTURL
                        URL where the feed will be accessible, default
                        http://stream.e5.ijs.si/feeds appended with the name
                        of the feed (directory) with xml extension
  -j PUBLISHER, --author=PUBLISHER
                        Publisher of the feed
  -u ID, --id=ID        Unique identifier of the feed
  -i IMAGE, --image=IMAGE
                        Image of the feed
  -p PUBLISH, --publish-link=PUBLISH
                        Publish link of the feed (absolute), default
                        http://stream.e5.ijs.si/publish
  -o CUCI, --cu-class-instance=CUCI
                        Content unit class instance used in an export of the
                        feed. Enables customization of the export per unit
  -b DIDBASE, --did-base=DIDBASE
                        Feed DID base file
  -x COREMETAFILE, --core-metadata=COREMETAFILE
                        Core metadata file used as template for the feed or an
                        item. Caution: if used with the item the channel
                        metadata gets overwritten by this metadata. In this
                        case the item metadata should specify the channel
                        metadata as well.
  -y MIMETYPE, --mime-type=MIMETYPE
                        Item mime type
  -s SYNOPSIS, --synopsis=SYNOPSIS
                        Item synopsis
  -z CONTENT, --content=CONTENT
                        Content file pointed to in an item

The first line warns us why the failure has occurred and then the tool
help is returned. One of the main modes of the tool needs to be
specified:
 + '-c': create the feed from scratch
 + '-a': add a new item to the feed
 + '-r': remove the item from the feed, or
 + '-l': list the feed information

The other parameters usage will be explained through examples.

The feed can be created as is presented in the following example. The
content feed for FAB channel is created with suitable title and
description. RichMetadata wise they get mapped to title main and
series title. Feed image is assigned, url where the feed could be
obtained from (-e) and absolute publishing link for the feed items
(-p):

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -c -t "FAB Channel feed" -k "Concerts in Paradiso, Amsterdam" -g "FAB channel" -j "P2P-Next (www.p2p-next.org)" -n "en" -i "http://stream.e5.ijs.si/images/p2p-next-logo.jpg" -e "http://stream.e5.ijs.si/feeds/fab.xml" -p "http://stream.e5.ijs.si/torrents"

The result of the command is a new feed storage directory at
settings.MEDIA_ROOT, in this case '/media/external/':

  xyz:~/src/Next-Share:{1}> ls -a /media/external/FAB_Channel_feed
.  ..  FAB_Channel_feed.xml  .properties

The xml file holds the feed RichMetadata information and the
.properties file feed properties:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/printxml.py -f /media/external/FAB_Channel_feed/FAB_Channel_feed.xml
<?xml version="1.0" encoding="utf-8"?>
<TVAMain publisher="P2P-Next (www.p2p-next.org)" xmlns="urn:tva:metadata:2007" xmlns:mpeg7="urn:mpeg:mpeg7:schema:2001" xmlns:mpeg7_tva="urn:tva:mpeg7:2005" xmlns:p2pnext="urn:p2pnext:metadata:2008" xmlns:tva="urn:tva:metadata:2007" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:tva:metadata:2007 tva_metadata_3-1_v141_p2p.xsd">
   <ProgramDescription>
      <ProgramInformationTable>
         <ProgramInformation>
            <BasicDescription type="p2pnext:BasicP2PDataDescriptionType">
               <Title type="main">
                  FAB Channel feed
               </Title>
               <Title type="seriesTitle">
                  Concerts in Paradiso, Amsterdam
               </Title>
               <Language>
                  en
               </Language>
               <p2pnext:Originator>
                  FAB channel
               </p2pnext:Originator>
            </BasicDescription>
         </ProgramInformation>
      </ProgramInformationTable>
   </ProgramDescription>
</TVAMain>

  xyz:~/src/Next-Share:{1}> cat /media/external/FAB_Channel_feed/.properties
location = file:///media/external/FAB\_Channel\_feed
name = FAB Channel feed
cstype = channel
publish = http://stream.e5.ijs.si/torrents
image = http://stream.e5.ijs.si/images/p2p-next-logo.jpg
contentUnitClassInstance = ContentUnit
exportFeedLink = http://stream.e5.ijs.si/feeds/fab.xml

If the same feed with the same name is created with another '-c'
command the feed information is simply overwritten.

Then the items of the feed can be added to the feed. Lets say that we
would like add the FAB channel content as is available in the
directory '/media/external/content/20050526_monokino.m4v'. The
following command will add an item to the feed and create item
RichMetadata from the feed metadata, information supplied on the
command line and technical metadata of the content:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -a -d /media/external/FAB_Channel_feed -z /media/external/content/20081213_gpnl_missippi_hdv.m4v -s "Missippi whatever synopsis" -t "Misippi live performance in Paradiso, Amsterdam, 2008"

The result will show up in the feed storage:

  xyz:~/src/Next-Share:{1}> ls -al /media/external/FAB_Channel_feed
lrwxrwxrwx 1 dusan dusan   54 2010-11-22 11:43 20081213_gpnl_missippi_hdv.m4v -> /media/external/content/20081213_gpnl_missippi_hdv.m4v
-rw-r--r-- 1 dusan dusan 1476 2010-11-22 11:43 20081213_gpnl_missippi_hdv.xml
-rw-r--r-- 1 dusan dusan  766 2010-11-22 11:30 FAB_Channel_feed.xml
-rw-r--r-- 1 dusan dusan  286 2010-11-22 11:30 .properties

As can be seen the content is simply a link to the content specified
on the command line (the item can be easily removed without loosing
the content itself) and content metadata:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/printxml.py -f /media/external/FAB_Channel_feed/20081213_gpnl_missippi_hdv.xml

<?xml version="1.0" encoding="utf-8"?>
<TVAMain publisher="P2P-Next (www.p2p-next.org)" xmlns="urn:tva:metadata:2007" xmlns:mpeg7="urn:mpeg:mpeg7:schema:2001" xmlns:mpeg7_tva="urn:tva:mpeg7:2005" xmlns:p2pnext="urn:p2pnext:metadata:2008" xmlns:tva="urn:tva:metadata:2007" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:tva:metadata:2007 tva_metadata_3-1_v141_p2p.xsd">
   <ProgramDescription>
      <ProgramInformationTable>
         <ProgramInformation>
            <BasicDescription type="p2pnext:BasicP2PDataDescriptionType">
               <Title type="main">
                  FAB Channel feed
               </Title>
               <Title type="seriesTitle">
                  Concerts in Paradiso, Amsterdam
               </Title>
               <Title type="episodeTitle">
                  Misippi live performance in Paradiso, Amsterdam, 2008
               </Title>
               <Synopsis>
                  Missippi whatever synopsis
               </Synopsis>
               <Language>
                  en
               </Language>
               <Duration>
                  00:16:40.17
               </Duration>
               <p2pnext:Originator>
                  FAB channel
               </p2pnext:Originator>
            </BasicDescription>
            <AVAttributes>
               <FileFormat href="urn:mpeg:mpeg7:cs:FileFormatCS:2001">
                  <Name>
                     mov
                  </Name>
               </FileFormat>
               <FileSize>
                  1564901380
               </FileSize>
               <BitRate>
                  12517 kb/s
               </BitRate>
               <AudioAttributes>
                  <Coding href="urn:mpeg:mpeg7:cs:AudioCodingFormatCS:2001">
                     <Name>
                        aac
                     </Name>
                  </Coding>
                  <NumOfChannels>
                     2
                  </NumOfChannels>
               </AudioAttributes>
               <VideoAttributes>
                  <Coding href="urn:mpeg:mpeg7:cs:VisualCodingFormatCS:2001">
                     <Name>
                        h264
                     </Name>
                  </Coding>
                  <HorizontalSize>
                     1280
                  </HorizontalSize>
                  <VerticalSize>
                     720
                  </VerticalSize>
                  <AspectRatio>
                     16:9
                  </AspectRatio>
               </VideoAttributes>
            </AVAttributes>
         </ProgramInformation>
      </ProgramInformationTable>
   </ProgramDescription>
</TVAMain>

As can be seen from provided example the feed metadata gets mapped to
main and series title and item title to episode title. The technical
metadata gets extracted from the content automatically.

At the same time the torrent file got created for the item. It is
located at location as is specified with the
settings.EXPORT_TORRENT_DIR variable (default
'/media/external/torrents'). We can take a look at the torrent file
created with a RichMetadata tool btshowmetainfo:

  xyz:~/src/Next-Share:{1}> python JSI/RichMetadata/tools/btshowmetainfo.py /media/external/torrents/20081213_gpnl_missippi_hdv.tstream

metainfo: 'creation date', 'announce', 'info', 'azureus_properties', 'encoding'
azprop: 'Content'
content: 'Publisher', 'Description', 'Progressive', 'Title', 'Creation Date', 'Content Hash', 'Speed Bps', 'Revision Date'
Publisher = Tribler
Description =
Progressive = 1
Title = 20081213_gpnl_missippi_hdv.m4v
Creation Date = 1290422609
Content Hash = PT3GQCPW4NPT6WRKKT25IQD4MU5HM4UY
Speed Bps = 1564901
Revision Date = 1290422609
metainfo file.: 20081213_gpnl_missippi_hdv.tstream
info hash.....: d1ed1996375d63de38074e9e1f835973105323c2
info hash.....: '\xd1\xed\x19\x967c\xde8\x07N\x9e\x1f\x83Ys\x10S#\xc2'
file name.....: 20081213_gpnl_missippi_hdv.m4v
file size.....: 1564901380 (47757 * 32768 + 4)
announce url..: http://127.0.0.1:6969/announce
ns-metadata...:
<?xml version="1.0" ?>
<DIDL xmlns:didl="urn:mpeg:mpeg21:2002:02-DIDL-NS" xmlns:dii="urn:mpeg:mpeg21:2002:01-DII-NS" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:mpeg:mpeg21:2002:02-DIDL-NS didl.xsd urn:mpeg:mpeg21:2002:01-DII-NS dii.xsd">
   <Item>
      <Descriptor>
         <Statement mimeType="text/xml">
            <dii:Type>
               urn:p2p-next:type:item:2009
            </dii:Type>
         </Statement>
      </Descriptor>
      <Descriptor>
         <Descriptor>
            <Statement mimeType="text/xml">
               <dii:Type>
                  urn:p2p-next:type:rm:core:2009
               </dii:Type>
            </Statement>
         </Descriptor>
         <Statement mimeType="text/xml">
            &lt;TVAMain publisher=&quot;P2P-Next (www.p2p-next.org)&quot; xmlns=&quot;urn:tva:metadata:2007&quot; xmlns:mpeg7=&quot;urn:mpeg:mpeg7:schema:2001&quot; xmlns:mpeg7_tva=&quot;urn:tva:mpeg7:2005&quot; xmlns:p2pnext=&quot;urn:p2pnext:metadata:2008&quot; xmlns:tva=&quot;urn:tva:metadata:2007&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;urn:tva:metadata:2007 tva_metadata_3-1_v141_p2p.xsd&quot;&gt;&lt;ProgramDescription&gt;&lt;ProgramInformationTable&gt;&lt;ProgramInformation&gt;&lt;BasicDescription type=&quot;p2pnext:BasicP2PDataDescriptionType&quot;&gt;&lt;Title type=&quot;main&quot;&gt;FAB Channel feed&lt;/Title&gt;&lt;Title type=&quot;seriesTitle&quot;&gt;Concerts in Paradiso, Amsterdam&lt;/Title&gt;&lt;Title type=&quot;episodeTitle&quot;&gt;Misippi live performance in Paradiso, Amsterdam, 2008&lt;/Title&gt;&lt;Synopsis&gt;Missippi whatever synopsis&lt;/Synopsis&gt;&lt;Language&gt;en&lt;/Language&gt;&lt;Duration&gt;00:16:40.17&lt;/Duration&gt;&lt;p2pnext:Originator&gt;FAB channel&lt;/p2pnext:Originator&gt;&lt;/BasicDescription&gt;&lt;AVAttributes&gt;&lt;FileFormat href=&quot;urn:mpeg:mpeg7:cs:FileFormatCS:2001&quot;&gt;&lt;Name&gt;mov&lt;/Name&gt;&lt;/FileFormat&gt;&lt;FileSize&gt;1564901380&lt;/FileSize&gt;&lt;BitRate&gt;12517 kb/s&lt;/BitRate&gt;&lt;AudioAttributes&gt;&lt;Coding href=&quot;urn:mpeg:mpeg7:cs:AudioCodingFormatCS:2001&quot;&gt;&lt;Name&gt;aac&lt;/Name&gt;&lt;/Coding&gt;&lt;NumOfChannels&gt;2&lt;/NumOfChannels&gt;&lt;/AudioAttributes&gt;&lt;VideoAttributes&gt;&lt;Coding href=&quot;urn:mpeg:mpeg7:cs:VisualCodingFormatCS:2001&quot;&gt;&lt;Name&gt;h264&lt;/Name&gt;&lt;/Coding&gt;&lt;HorizontalSize&gt;1280&lt;/HorizontalSize&gt;&lt;VerticalSize&gt;720&lt;/VerticalSize&gt;&lt;AspectRatio&gt;16:9&lt;/AspectRatio&gt;&lt;/VideoAttributes&gt;&lt;/AVAttributes&gt;&lt;/ProgramInformation&gt;&lt;/ProgramInformationTable&gt;&lt;/ProgramDescription&gt;&lt;/TVAMain&gt;
         </Statement>
      </Descriptor>
      <Component>
         <Resource mimeType="video/x-m4v" ref="20081213_gpnl_missippi_hdv.m4v"/>
      </Component>
   </Item>
</DIDL>

Another item could be added with the similar command:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -a -d /media/external/FAB_Channel_feed -z /media/external/content/20050526_monokino.m4v -s "Monokino whatever synopsis" -t "Monokino live performance in Paradiso, Amsterdam, 2005"

The managefeed tool command line parameters allows specifying only
parameters essential for the feed creation. If there is a need for
additional information in RichMetadata of the content, like genre,
minimum age, etc., one can create necessary metadata before creating a
feed and adding an item to the feed. For example, feed metadata could
be defined with RichMetadata metagen tool:

  xyz:~/src/Next-Share:{1}> python JSI/RichMetadata/tools/metagen.py --captionLanguage=en --genre="Live concert" --language=en --minimumAge=3 --originator="FAB Channel" --productionDate=2010-08-16 --productionLocation=NL --publisher=p2p-next --releaseDate=2010-08-17 --signLanguage=en --titleMain="FAB Channel feed" --titleSeriesTitle="Concerts in Paradiso, Amsterdam" > fab.xml

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -c -i "http://stream.e5.ijs.si/images/p2p-next-logo.jpg" -e "http://stream.e5.ijs.si/feeds/fab.xml" -p "http://stream.e5.ijs.si/torrents" -x fab.xml

and provided as an template while creating the feed ('-x' option). Of
course the metadata can be replaced directly by copying the metadata
to feed store (in this case replacing the file
FAB_Channel_feed.xml). All items added to the feed later will inherit
the same data as stored in this file, except if you use the template
while adding the item as well. In this case the item metadata should
include the feed metadata as well:

  xyz:~/src/Next-Share:{1}> python JSI/RichMetadata/tools/metagen.py --captionLanguage=en --genre="Live concert" --language=en --minimumAge=3 --originator="FAB Channel" --productionDate=2010-08-16 --productionLocation=NL --publisher=p2p-next --releaseDate=2010-08-17 --signLanguage=en --synopsis="Monokino whatever synopsis" --titleEpisodeTitle="Monokino live performance in Paradiso, Amsterdam, 2005" --titleMain="FAB Channel feed" --titleSeriesTitle="Concerts in Paradiso, Amsterdam" > fab-monokino.xml

and the template can be used while creating an item:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -a -d /media/external/FAB_Channel_feed -z /media/external/content/20081213_gpnl_missippi_hdv.m4v -x fab-monokino.xml

If the resulted feed is now listed, we see two items in the feed:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -l /media/external/FAB_Channel_feed

'FAB Channel feed', stored in /media/external/FAB_Channel_feed
Location: file:///media/external/FAB\_Channel\_feed
  1) Monokino live performance in Paradiso, Amsterdam, 2005
     Identifier: 42d63e76f63c979a5d63458a2867606358e229a1
     Content:    20050526_monokino.m4v
     Metadata:   20050526_monokino.xml
     Torrent:    20050526_monokino.tstream
  2) Misippi live performance in Paradiso, Amsterdam, 2008
     Identifier: 8a9640c940c4958d863797802d50d3ff5029b8bb
     Content:    20081213_gpnl_missippi_hdv.m4v
     Metadata:   20081213_gpnl_missippi_hdv.xml
     Torrent:    20081213_gpnl_missippi_hdv.tstream

We can see in the list output the items identifiers as well. They can
be used for removing the items from the feed:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/managefeed.py -d /media/external/FAB_Channel_feed -r 8a9640c940c4958d863797802d50d3ff5029b8bb

would remove the Missippi item from the feed.

The P2P-Next compliant feed could then be obtained from created with
getfeed tool:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/getfeed.py -l /media/external/FAB_Channel_feed
<?xml version="1.0" encoding="utf-8"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom" xmlns:p2pnext="urn:p2pnext:contentfeed:2009">
   <title>
      FAB Channel feed
   </title>
   <link href="http://stream.e5.ijs.si/feeds/fab.xml" rel="self"/>
   <id>
      http://stream.e5.ijs.si/feeds/fab.xml
   </id>
   <updated>
      2010-11-22T12:19:27Z
   </updated>
   <author>
      <name>
         P2P-Next (www.p2p-next.org)
      </name>
   </author>
   <p2pnext:image src="http://stream.e5.ijs.si/images/p2p-next-logo.jpg"/>
   <entry>
      <title>
         Monokino live performance in Paradiso, Amsterdam, 2005
      </title>
      <link href="http://stream.e5.ijs.si/torrents/20050526\_monokino.tstream" rel="alternate" type="application/x-bittorrent"/>
      <updated>
         2010-11-22T12:19:27Z
      </updated>
      <id>
         urn:p2p-next:item:tag:stream.e5.ijs.si:/torrents/20050526_monokino.tstream/
      </id>
      <summary>
         Monokino whatever synopsis
      </summary>
      <p2pnext:image src="http://stream.e5.ijs.si/images/p2p-next-logo.jpg"/>
   </entry>
   <entry>
      <title>
         Misippi live performance in Paradiso, Amsterdam, 2008
      </title>
      <link href="http://stream.e5.ijs.si/torrents/20081213\_gpnl\_missippi\_hdv.tstream" rel="alternate" type="application/x-bittorrent"/>
      <updated>
         2010-11-22T12:19:27Z
      </updated>
      <id>
         urn:p2p-next:item:tag:stream.e5.ijs.si:/torrents/20081213_gpnl_missippi_hdv.tstream/
      </id>
      <summary>
         Missippi whatever synopsis
      </summary>
      <p2pnext:image src="http://stream.e5.ijs.si/images/p2p-next-logo.jpg"/>
   </entry>
</feed>

From the feed output can be seen how the export url parameter (-e) and
absolute publishing link (-p), defined while creating the feed) are
used. The feed id, item id and item images get the default treatment
as it is explained in the section on getfeed tool.

Of course the discovery feed, when created, will include the FAB
channel feed as well, besides three other feeds:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/discoveryfeed.py -t "Discovery feed" -e http://stream.e5.ijs.si/discovery.xml -p "P2P-Next JSI/RTV Slovenia (livinglab@e5.ijs.si)"

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:p2pnext="urn:p2pnext:contentfeed:2009">
   <title>
      Discovery feed
   </title>
   <link href="http://stream.e5.ijs.si/discovery.xml" rel="self"/>
   <id>
      http://stream.e5.ijs.si/discovery.xml
   </id>
   <updated>
      2010-11-22T12:47:02Z
   </updated>
   <author>
      <name>
         P2P-Next JSI/RTV Slovenia Living Lab (livinglab@e5.ijs.si)
      </name>
   </author>
   <p2pnext:image src="http://stream.e5.ijs.si/images/p2p-next-logo.jpg"/>
   <entry>
      <title>
         RTV - Studio city
      </title>
      <link href="http://stream.e5.ijs.si/feeds/studio\_city.xml" rel="alternate" type="application/atom+xml"/>
      <updated>
         2010-11-22T12:47:02Z
      </updated>
      <id>
         http://stream.e5.ijs.si/feeds/studio\_city.xml
      </id>
      <summary>
         Tedenska enourna oddaja magazinsko-informativnega formata, ki ob ponedeljkih zvečer ob 21.uri v živo teče na drugem programu TV Slovenija, je postala kultna zaradi svojega alternativnega in drznega pristopa k obdelavi različnih tem in dogodkov. Studio City se začenja z zgoščenim in učinkovitim pregledom dogodkov preteklega tedna, nato se dotakne notranjepolitičnih in svetovnih dogodkov, sodobne kulture, ne izogiba se niti družbeno perečih tematik. Provokativno anketno vprašanje obdrži gledalce pred zasloni do konca oddaje, ko se izpišejo rezultati t.i. ''mini referenduma''.
      </summary>
      <category schema="urn:service-type" term="tv"/>
      <p2pnext:image src="http://www.rtvslo.si/podcasts/mmc.png"/>
   </entry>
   <entry>
      <title>
         FAB Channel feed
      </title>
      <link href="http://stream.e5.ijs.si/feeds/fab.xml" rel="alternate" type="application/atom+xml"/>
      <updated>
         2010-11-22T12:47:02Z
      </updated>
      <id>
         http://stream.e5.ijs.si/feeds/fab.xml
      </id>
      <summary>
         Concerts in Paradiso, Amsterdam
      </summary>
      <category schema="urn:service-type" term="tv"/>
      <p2pnext:image src="http://stream.e5.ijs.si/images/p2p-next-logo.jpg"/>
   </entry>
   <entry>
      <title>
         RTV - Zapisi iz Močvirja
      </title>
      <link href="http://stream.e5.ijs.si/feeds/zapisi\_iz\_mocvirja.xml" rel="alternate" type="application/atom+xml"/>
      <updated>
         2010-11-22T12:47:02Z
      </updated>
      <id>
         http://stream.e5.ijs.si/feeds/zapisi\_iz\_mocvirja.xml
      </id>
      <summary>
         Glosa Marka Radmiloviča, začinjena s prefinjenim smislom za humor, ki je enostavno ne smete preslišati!
      </summary>
      <category schema="urn:service-type" term="radio"/>
      <p2pnext:image src="http://www.rtvslo.si/podcasts/mmc.png"/>
   </entry>
   <entry>
      <title>
         Best of Today
      </title>
      <link href="http://stream.e5.ijs.si/feeds/best\_of\_today.xml" rel="alternate" type="application/atom+xml"/>
      <updated>
         2010-11-22T12:47:02Z
      </updated>
      <id>
         http://stream.e5.ijs.si/feeds/best\_of\_today.xml
      </id>
      <summary>
         Insight, analysis and expert debate as key policy makers are challenged on the latest news stories.
      </summary>
      <category schema="urn:service-type" term="radio"/>
      <p2pnext:image src="http://www.bbc.co.uk/radio/podcasts/today/assets/\_300x300.jpg"/>
   </entry>
</feed>

5.4 Publisher 
==============

The publisher wraps the Next-Share core and publishes all the torrent
files found in the torrent storage (specified via EXPORT_TORRENT_DIR
in default_settings.py) and shares torrent files related content. 

The publisher updates itself regularly. The interval used can be tuned
via UPDATE_INTERVAL as specified in the settings. Default update
interval of 60 seconds is intended for testing - production value
should be longer, around few minutes. During updates the publisher
finds new or removed content and reacts accordingly.

To run the publisher from a command line for testing, use:

  xyz:~/src/Next-Share:{1}> python JSI/ProviderToolbox/tools/publisher.py

The publisher log threshold is set to DEBUG, so you can follow the
debugging messages. The ProviderToolbox otherwise logs the messages
through the operating system syslog; the logging level there is set to
INFO so it is possible to follow the working of the toolbox.

For production usage one could use for now the publisher script in the
JSI/ProviderToolbox/bin/publisher directory. after running the process
should be detached (disown?) from the terminal so the terminal closure
wouldn't affect the running process.

5.4.1 Controlling the publisher 
--------------------------------

The publisher can be controlled through process signals, send to the
publisher proces:
- kill -TERM 'pid of the publisher' will terminate the publisher
- kill -HUP 'pid of the publisher' will force publisher update
- kill -USR1 'pid of the publisher' will cycle the log level of the
  publisher (but only the logging to the terminal)

When running in the terminal CTR-C will shutdown the publisher
gracefully.

6 Changelog 
~~~~~~~~~~~~

     - v0.1 initial release
     - v0.12:
       + Added broaden and more consistent restoring of the content
         source properties; once the cs is initially created it is
         enough that only location is requested again - all other
         parameters are read from feed properties. If some of them are
         specified again they prevail
       + fetched content units and resulting exported feeds are now
         sorted as in incoming feed
       + getfeed and programmable abstractions honors a feed window
         (number of content units to keep)
       + discovery feed creation tool is available
     - v0.15:
       + some bugfixes and minor improvements
       + managefeed tool is available: can create VoD feed from a
         scratch, add or remove feed items, lists the feed
       + printxml tool is available, pretty prints the xml metadata
       + Documentation update (this README)
     - v0.20
       + publisher (seeder) tool is available, publishes all torrent
         files found in the torrent storage, updates the status
         automatically and removes removed or publishes newly added
         content
       + few changes to other tools:
         * getfeed can now use feed directory only to update
         * CONTENT_PUBLISHING_LINK and EXPORT_FEED_LINK variables in
           setting can be used for feeds publishing needs
       + documentation update (README) sections on "Before using the
         toolbox" and "Feed lifecycle management" were added

